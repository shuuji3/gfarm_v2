#!/bin/sh
PROGRAM=gfruntest
GFSERVICE="@bindir@/gfservice"
TEST_PREFIX="@datadir@/gfarm/systest"
TESTCASES_DIR="$TEST_PREFIX/testcases"
PARAMETERS_DIR="$TEST_PREFIX/parameters"
COMMON_SCRIPTS_DIR="$TEST_PREFIX/common_scripts"

#
# Result codes
#
RESULT_PASS=0
RESULT_FAIL=1
RESULT_XPASS=2			# passed, but it's unexpected. fixed recently?
RESULT_XFAIL=3			# failed, but it's expected. i.e. known bug.
RESULT_UNRESOLVED=4		# cannot determine whether (X)?PASS or (X)?FAIL
RESULT_FATAL=5			# something fatal happend and cannot continue
RESULT_UNTESTED=6		# not tested, this test haven't written yet.
RESULT_UNSUPPORTED=7		# not tested, this environment can't test this.

#
# Output a warning message.
#
log_warn()
{
	echo "$PROGRAM: warning: $@" 1>&2
	return 0
}

#
# Output an error message.
#
log_error()
{
	echo "$PROGRAM: error: $@" 1>&2
	exit 1
}

#
# Output an error message with usage.
#
log_usage_error()
{
	echo "$PROGRAM: error: $@" 1>&2

	echo "Usage: $PROGRAM [option...] testcase [<argument>...]"	1>&2
	echo "Option:"							1>&2
	echo "  -d                  debug mode"				1>&2
	echo "  -k                  pass '-k' option to gfservice"      1>&2
	echo "  -f <config_file>    specify the gfservice configuration file" \
		1>&2
	echo "  -p <parameter_file> specify the test parameter file"	1>&2
	echo "  -j <classname>      specify the classname and outputs xml file" \
		1>&2
	
	exit 1
}

#
# Load script files from common_scripts directory.
#
load()
{
	if [ $# -lt 1 ]; then
		return 1;
	fi

	for MODULE in $@; do
		FILE=`echo $MODULE | sed -e 's|::|/|g'`
		if [ -f $COMMON_SCRIPTS_DIR/$FILE ]; then
			. $COMMON_SCRIPTS_DIR/$FILE
		elif [ -f $COMMON_SCRIPTS_DIR/gfarm_v2/$FILE ]; then
			log_warn "use 'gfarm_v2::$FILE' instead of '$FILE'"
			. $COMMON_SCRIPTS_DIR/gfarm_v2/$FILE
		elif [ -f $COMMON_SCRIPTS_DIR/gfarm2fs/$FILE ]; then
			log_warn "use 'gfarm2fs::$FILE' instead of '$FILE'"
			. $COMMON_SCRIPTS_DIR/gfarm2fs/$FILE
		else
			log_warn "failed to open script file \"$FILE\""
		fi
	done
}

#
# set result code
#
set_result()
{
	if `eval [ \\$$1 -eq $RESULT_PASS -o \\$$1 -eq $RESULT_XFAIL ]`; then
		eval $1=$2
	fi
}

#
# returns result message
#
result_message()
{
	case $1 in
	$RESULT_PASS)
		echo "PASS";;
	$RESULT_FAIL)
		echo "FAIL";;
	$RESULT_XPASS)
		echo "XPASS";;
	$RESULT_XFAIL)
		echo "XFAIL";;
	$RESULT_UNRESOLVED)
		echo "UNRESOLVED";;
	$RESULT_FATAL)
		echo "FATAL";;
	$RESULT_UNTESTED)
		echo "UNTESTED";;
	$RESULT_UNSUPPORTED)
		echo "UNSUPPORTED";;
	*)
		echo "UNKNOWN RESULT CODE";;
	esac
}

#
# print test result in xml format
#
print_test_result()
{
	# $1=$JENKINS_CLASSNAME
	# $2=$TESTNAME
	# $3=$RESULT
	# $4=$ELAPSED_TIME
	# $5=$JENKINS_FILE

	TESTCASE_FMT_BEGIN="    <testcase classname=\"%s\" name=\"%s\" time=\"%d\">\n"
	TESTCASE_FMT_END="    </testcase>\n"
	FAILURE_FMT="    <failure message=\"%s\"/>\n"

	printf -- "$TESTCASE_FMT_BEGIN" $1 $2 $4 >> $5
	case $3 in
		$RESULT_FAIL | $RESULT_XPASS | $RESULT_UNRESOLVED | $RESULT_FATAL)
			printf -- "$FAILURE_FMT" "`result_message $3`" >> $5
	esac
	printf -- "$TESTCASE_FMT_END" >> $5
}

#
# Parse command line options.
#
while [ $# -ge 1 ]; do
	case "$1" in
	--)	shift
		break
		;;
	-)	break
		;;
	-d)	GFSERVICE="$GFSERVICE -d"
		shift
		;;
	-f)	shift
		if [ $# -eq 0 ]; then
			log_usage_error "option requires an argument -- 'f'"
		fi
		if [ -f $1 ]; then
			GFSERVICE="$GFSERVICE -f $1"
		else
			log_error "failed to open configuration file \"$1\""
		fi
		shift
		;;
	-k)	GFSERVICE="$GFSERVICE -k"
		shift
		;;
	-p)	shift
		if [ $# -eq 0 ]; then
			log_usage_error "option requires an argument -- 'p'"
		fi
		FILE="`echo $1 | sed -e 's|::|/|g'`"
		if [ -f $PARAMETERS_DIR/$FILE ]; then
			. $PARAMETERS_DIR/$FILE
		elif [ -f $PARAMETERS_DIR/gfarm_v2/$FILE ]; then
			log_warn "use 'gfarm_v2::$FILE' instead of '$FILE'"
			. $PARAMETERS_DIR/gfarm_v2/$FILE
		elif [ -f $PARAMETERS_DIR/gfarm2fs/$FILE ]; then
			log_warn "use 'gfarm2fs::$FILE' instead of '$FILE'"
			. $PARAMETERS_DIR/gfarm2fs/$FILE
		else
			log_error "failed to open parameter file \"$FILE\""
		fi
		shift
		;;
	-j)	shift
		if [ $# -eq 0 ]; then
			log_usage_error "option requires an argument -- 'j'"
		fi
		JENKINS_CLASSNAME=$1
		shift
		;;
	-*)	echo "$0: invalid option -- '$1'" 1>&2
		print_usage
		;;
	*)	break
		;;
	esac
done

if [ $# -lt 1 ]; then
	log_usage_error "test case is not specified"
fi

TESTNAME="`echo $1 | sed -e 's|^.*::||g'`"
TESTFILE="`echo $1 | sed -e 's|::|/|g'`"
shift 1
TEST_EXEC_ID="test_`hostname`_$$"

if [ -f "$TESTCASES_DIR/$TESTFILE" ]; then
	. "$TESTCASES_DIR/$TESTFILE"
elif [ -f "$TESTCASES_DIR/gfarm_v2/$TESTFILE" ]; then
	log_warn "use 'gfarm_v2::$TESTNAME' instead of '$TESTNAME'"
	. "$TESTCASES_DIR/gfarm_v2/$TESTFILE"
elif [ -f "$TESTCASES_DIR/gfarm2fs/$TESTFILE" ]; then
	log_warn "use 'gfarm2fs::$TESTNAME' instead of '$TESTNAME'"
	. "$TESTCASES_DIR/gfarm2fs/$TESTFILE"
else
	log_error "invalid test case: $TESTNAME"
fi

echo -n "start: $TESTNAME "
date

if [ X$JENKINS_CLASSNAME != X ]; then
	JENKINS_FILE=TEST-${JENKINS_CLASSNAME}-${TESTNAME}.xml
	rm -f $JENKINS_FILE

	echo "<testsuite>" >> $JENKINS_FILE

	START_TIME=`date +%s`
fi

test_${TESTNAME} "$@"
RESULT=$?

if [ X$JENKINS_CLASSNAME != X ]; then
	ELAPSED_TIME=`expr \`date +%s\` - $START_TIME`

	print_test_result $JENKINS_CLASSNAME $TESTNAME $RESULT $ELAPSED_TIME \
		$JENKINS_FILE

	echo "</testsuite>" >> $JENKINS_FILE
fi

echo -n "end: $TESTNAME `result_message $RESULT` "
date

exit $RESULT
