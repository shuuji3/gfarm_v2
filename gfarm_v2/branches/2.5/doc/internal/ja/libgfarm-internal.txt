■  stat/xattrキャッシュ

libgfarmにはファイルパスに対する stat と xattr をキャッシュする機能があり、
gfs_dircache.c に実装されている。
この機能は基本的には gfarm2fs を介した ls コマンドによる参照を高速化するために
実装された。

キャッシュの機能を利用するには、キャッシュを利用するAPIを呼ぶ必要がある。
すなわち、gfs_stat() や gfs_getxattr() のような直接 RPC を呼ぶ API はキャッシュ
を一切利用せず、直接 RPC を呼ぶ API に対応する *_caching()、*_cached()
という名称の関数がキャッシュを利用する。
API 利用者が使用する関数は gfs_statsw.c に実装されている次の関数である。

  gfs_opendir_caching()
  gfs_stat_cached()
  gfs_lstat_cached()
  gfs_getxattr_cached()
  gfs_lgetxattr_cached()

*_cached()、*_caching() 関数は gfs_stat_cache_enable() によって
キャッシュの利用を有効または無効に切り替えられる(ただし、gfs_opendir_caching()
以外の *_caching() を除く)。
キャッシュの利用を無効にすると、gfs_stat() 等の直接 RPC を呼ぶ API と
同等の動作をする。

* *_cached()、*_caching() の役割

  - *_cached() はキャッシュを検索してヒットすれば、キャッシュの
    値を返し、ヒットしなければ RPC で値を取得してキャッシュへ格納し、
    値を返す。

  - *_caching() は RPC で取得した値をキャッシュへ格納し、値を返す。
    gfs_opendir_caching() にも、gfs_dircache.h で公開されている *_caching() 系の
    関数があるが、通常は gfs_opendir_caching() だけ使用すれば良い。

* キャッシュ対象のデータ

  キャッシュ対象のファイルパスに対して次の値をキャッシュ領域に格納する。

  - xattr_cache_list が保持する全ての属性名に対応する xattr の名称と値
    (gfarm.ncopy がこれに該当)

  - gfs_getxattr_cached() などの属性取得系の関数で取得しようとした
    xattr_cache_list に含まれない xattr の名称と値。

  RPC による値の取得には gfs_getattrplus() / gfs_lgetattrplus() を使用している。

* キャッシュ領域の種類

  キャッシュ領域にはシンボリックリンク解決後のパスに対する stat_cache、
  解決前のパスに対する lstat_cache の2種類がある。

  stat_cache のエントリは gfs_stat_cached(), gfs_getxattr_cached() で
  利用する。
  lstat_cache のエントリは gfs_lstat_cached(), gfs_lgetxattr_cached() で
  利用する。さらに RPC で取得した stat を見て inode の種類が symlink 以外で
  あれば、stat_cache にもエントリを格納する。
  gfs_opendir_caching() も同様に inode の種類のより、symlink は lstat_cache
  へ、symlink 以外は lstat_cache と stat_cache へ格納する。

* キャッシュを破棄するタイミング

  - 暗黙的な破棄
  
    キャッシュへ値を格納するタイミングで、キャッシュ保持の条件を満たさない
    エントリを破棄する。破棄するかどうかは gfarm_attr_cache_limit と
    gfarm_attr_cache_timeout によって決まる。gfarm_attr_cache_limit は
    それぞれのキャッシュ領域に対して独立して適用する。

  - 明示的な破棄

    gfs_stat_cache_purge() は任意のパスのキャッシュを明示的に破棄する。
    stat_cache、lstat_cache の両方の領域が対象。

* Configuration

  キャッシュ関連の設定値に以下のものがある。

  - gfarm_attr_cache_limit (設定ファイルの attr_cache_limit)
    キャッシュ領域に保持するエントリ数。

  - gfarm_attr_cache_timeout (設定ファイルの attr_cache_timeout)
    エントリをキャッシュ領域に保持する期間(ミリ秒単位)。
    デフォルトで 1 秒。

■  gfmd 接続のフェイルオーバ

gfmdフェイルオーバ対応の実装方法について説明する。

gfm_client_* 系の関数による gfmd へのアクセスにおいて gfmd フェイルオーバ
対応の処理を追加する。

1. gfs_pio_should_failover() によって
   フェイルオーバを試みるきかどうかを判断する。
2. 1. の戻値が 1 の場合は、gfs_pio_failover() を呼ぶ。
3. 2. の戻値が GFARM_ERR_NO_ERROR のとき、エラーの発生した gfm_client_* 関数
   を再度実行する。
4. 3. での再実行で発生するエラーに対しては、
   gfs_pio_should_failover() / gfs_pio_failover() を呼ばないこと。
   そのようなエラーは高い確率でフェイルオーバ先の gfmd との接続に問題があると
   考えられ、それ以上のフェイルオーバ処理は無駄であると考えられるため。

* gfs_pio_should_failover

  #include "gfs_pio_failover.h"

  int gfs_pio_should_failover(GFS_File gf, gfarm_error_t e)

  DESCRIPTION

    gfmd 接続のフェイルオーバを試みるべきかをどうかを判断する。
    冗長化構成の設定がされていない場合はフェイルオーバは 0 を返す。

  PARAMETER

    e : gfmd へのアクセスで生じたエラー。
    gf : アクセス対象のファイル。

  RETURN VALUE

    1 : フェイルオーバを試みるべき。
	0 : フェイルオーバをできる状態ではない。

* gfs_pio_failover

  #include "gfs_pio_failover.h"

  gfarm_error_t gfs_pio_failover(GFS_File gf)

  DESCRIPTION

    gfmd 接続をフェイルオーバする。
	フェイルオーバは引数の gf だけでなく、gf に関連する gfmd_connection に格納
	されたオープン中の GFS_File 全てに対して行われる。

	オープン後、スケジューリング済みの GFS_File については、GFS_File に関連する
	gfm_connection に加え、gfsd 内の gfm_connection もフェイルオーバする。
	未スケジューリングの GFS_File については、gfsd と接続していないので
	GFS_File に関連する gfm_connection のみが対象である。

    スケジューリング済みの GFS_File の gfs_connection はフェイルオーバ処理中に
	一度だけ GFS_PROTO_PROCESS_RESET を呼び出し、pid を再設定する。
	この処理に失敗すると、GFS_File が gfs_connection を持つにも関わらず、
	pid が 0 であるという特殊な状態になることに注意。
	このような場合、GFS_File.error には GFARM_ERR_CONNECTION_ABORTED
	が設定される。

    GFS_File の pid の再設定に成功した後、gfmd に対して fd の取得を試みるが、
	ここでエラーが発生すると GFS_File.fd は -1 に設定され、GFS_File.error には
	gfmd へのアクセス時に発生したエラーが設定される。

  PARAMETER

    gf : アクセス対象のファイル。

  RETURN VALUE

    GFARM_ERR_NO_ERROR : 成功。
	それ以外 : - gfm_connection のフェイルオーバに失敗した。
	           - gf のフェイルオーバに対して個別にエラーが発生した場合
			     (他のオープン中 GFS_File に対しては成功したかもしれない)。

