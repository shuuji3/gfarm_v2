スレーブ gfmd からマスター gfmd への RPC リレー機能の実装指針について
=====================================================================

本書は、スレーブ gfmd からマスター gfmd への RPC リレー機能を実現する
に当たって必要となる、各 GFM コマンド の処理関数のソースコードの修正
について、具体的な修正の要領を記したものである。


機能の概要と実装パターン
------------------------
各 GFM コマンド の処理関数での実装の対応は、以下の 3 パターンに分け、
それぞれ異なる方針で修正を行う。

  * 処理パターン 1
    対象コマンド: ファイルシステム以外の情報取得 (GET) コマンド、
                  ファイルシステムの stat 系コマンド、
                  ファイルシステムの getdent 系コマンド

        処理方針: スレーブ gfmd 内で自力で処理してクライアントにレスポンス
                  を返す。

  * 処理パターン 2
    対象コマンド: パターン 1. 以外のコマンドのうち、コマンド引数および
                  レスポンスのどちらにも、可変長データ (後述) を含まない
                  もの。

        処理方針: リクエストを受け取ったスレーブ gfmd は、マスター gfmd
                  にリクエストを転送し、マスター gfmd からのレスポンスを
                  クライアントへ送る。
                  GFM コマンドの引数およびレスポンスに可変長データを
                  含またないため、書き換え工程が単純。

  * 処理パターン 3
    対象コマンド: パターン 1. 以外のコマンドのうち、コマンド引数あるいは
                  レスポンスの少なくともどちら一方に、可変長のデータ (後述)
                  を含むもの。

        処理方針: パターン 2 同様、リクエストを受け取ったスレーブ gfmd は、
                  マスター gfmdにリクエストを転送し、マスター gfmd からの
                  レスポンスをクライアントへ送る。
                  ただし GFM コマンドの引数ないしレスポンスに可変長データ
                  を含むため、ソースコードの書き換え工程が複雑。

コマンド引数おける「可変長のデータ」とは、たとえば次のようなものである
(gfarm-v2-protocol-gfm.txt より)。

    GFM_PROTO_HOST_INFO_SET
      入力: s:hostname,
            i:n_host_aliases, s[n_host_aliases]:host_aliases,
            s:architecture, i:ncpu, i:port, i:flags
      出力: i:エラー

ここで、引数 host_aliases は先行する引数 n_host_aliases によって、占有する
サイズが変動するため「可変長のデータ」である。同様に、

        GFM_PROTO_HOST_INFO_GET_ALL
          入力: なし
          出力: i:エラー
                エラー == GFARM_ERR_NO_ERROR の場合:
                i:n_hosts,
                下記の、n_hosts 回の繰り返し:
                        s:hostname,
                        i:n_host_aliases, s[n_host_aliases]:host_aliases,
                        s:architecture, i:ncpu, i:port, i:flags

このコマンドは、レスポンス (= 出力) に可変長があるタイプである。
以下、それぞれのパターンでの処理方法や実装方法について、さらに詳しく記す。


処理パターン 1 の詳細
---------------------
本パターンでは、受け取ったリクエストをスレーブ gfmd は単独で処理して
クライアントにレスポンスを返す。

ただし、直前にクライアントが情報を更新するリクエストを発行していると、
その更新が DB にはまだ反映されておらず、ジャーナルにだけ書き込まれている
可能性がある。そのため、スレーブは最後にジャーナルの更新を行ったシーケンス
の番号を覚えておき、更新内容が DB に反映されるのを待ってから、DB への
問い合わせを行う。

その際、処理効率を上げるため「最後にジャーナルの更新を行ったシーケンス
番号」は、ホスト系/ユーザ系/グループ系のコマンド毎に覚えておくようにし、
DB への書き込み完了待ちは、コマンドの系統別に行う。

つまり、これからユーザ系の情報を取得するコマンドを実行する際は、「最後に
ジャーナルの更新を行った、ユーザ系コマンドのシーケンス番号」に対して DB
の書き込み完了を待つようにする。

各コマンドにおける実装方法は、次の通り。

  1. コマンド処理関数に、引数 xid, sizep を足す。
     [実装例]
       変更前:
          gfarm_error_t
          gfm_xxx(struct peer *peer, int from_client, int skip)
       変更後:
          gfarm_error_t
          gfm_xxx(struct peer *peer, gfp_xdr_xid_t xid, size_t *sizep,
              int from_client, int skip)

  2. レスポンスデータ生成用の情報を取得する処理の直前で、
     wait_db_update_info() を呼び、ジャーナルから DB への反映を待つ。

     [実装例]
          wait_db_update_info(mode);
          ※ mode は、GFM コマンドに応じて以下のいずれかを指定。
             - DBUPDATE_USER       (ユーザの情報所得を行うコマンドの場合)
             - DBUPDATE_GROUP      (グループの情報所得を行うコマンドの場合)
             - DBUPDATE_HOST       (ホストの情報所得を行うコマンドの場合)
             - DBUPDATE_GETDENT    (ディレクトリエントリ情報の所得を行う
                                    コマンドの場合)
             - DBUPDATE_FSTAT      (ファイルステータス情報の所得を行う
                                    コマンドの場合)


処理パターン 2 の詳細
---------------------
本パターンでは、リクエストを受け取ったスレーブ gfmd は、マスター gfmd に
リクエストを転送し、マスター gfmd からのレスポンスをクライアントへ送る。

本パターンを適用する GFM コマンドは、コマンドの引数およびレスポンスデータ
のいずれにも可変長のデータが含まれていないものに限られる。可変長データを
含む場合は、パターン 3 を適用すること。

各コマンドにおける実装方法は、次の通り。

  1. コマンド処理関数に、引数 xid, sizep を足す。
     [実装例]
       変更前:
          gfarm_error_t
          gfm_xxx(struct peer *peer, int from_client, int skip)
       変更後:
          gfarm_error_t
          gfm_xxx(struct peer *peer, gfp_xdr_xid_t xid, size_t *sizep,
              int from_client, int skip)

  2. リクエストの受信 API を gfm_server_get_request() から
     gfm_server_get_request_with_relay() に変える。

     [実装例]
       変更前:
          gfm_server_get_request(peer, diag, "s", &hostname)
       変更後:
          struct relayed_request *relay;
          gfm_server_get_request_with_relay(peer, sizep, skip, &relay,
              diag, GFM_PROTO_XXX, "s", &hostname)

  3. 変数 relay が NULL の場合だけ、コマンドを処理するようにする。

     [実装例]
       変更前:
          giant_lock();
        　コマンドの処理;
          giant_unlock();
       変更後:
          if (relay == NULL) {
              giant_lock();
        　    コマンドの処理;
              giant_unlock();
          }

  4. レスポンスの送信 API を gfm_server_put_reply() から
     gfm_server_put_reply_with_relay() に変える。
     また、gfm_server_put_reply_with_relay() では、gfarm_error_t を渡す
     のではなく、(gfarm_error_t *) を渡すように変更されているので、注意
     すること。

     [実装例]
       変更前:
          gfm_server_put_reply(peer, diag, e, "")
       変更後:
          gfm_server_put_reply_with_relay(peer, xid, sizep, relay, diag,
              &e, "")


処理パターン 3 の詳細
---------------------
本パターンはパターン 2 同様、マスター gfmd にリクエストを転送し、マスター
gfmd からのレスポンスをクライアントへ送る。ただし、パターン 2 に比べて、
可変長データのサイズの計算が複雑になる都合上、書き換えが大幅に増える。

大まかな要領としては、処理関数をリクエスト部とレスポンス部に 2 分割し、
それぞれ元とは別の関数名を与える必要がある。また、分割前の処理関数と
同名の関数は、新たに書き起こすことになる。

リクエスト部およびレスポンス部を分割するのは、以下のようにそれぞれの
部分を 2 回ずつ実行するようにしているためである。

    [リクエスト部の実行]
       1 回目: マスターへ転送するリクエストのサイズ計算処理
       2 回目: 実際にマスターへリクエストを転送

    [レスポンス部の実行]
       1 回目: クライアントへ転送するレスポンスのサイズ計算処理
       2 回目: 実際にクライアントへレスポンスを転送

これにより、サイズ計算と転送処理を別々に記述する手間を省いている。
一方で、2 回実行されるということを意識して記述する必要がある。
各コマンドにおける、さらに詳細な実装方法は、次の通り。

  1. リクエスト処理関数とレスポンス処理関数は 2 回ずつ呼ばれるので、
     1 回の関数呼び出しを越えて、何らかのデータを共有したい場合 
     (例: リクエスト処理関数からレスポンス処理関数にデータを渡す、
     レスポンス処理関数の呼び出し 1 回目から 2 回目にデータをデータを
     渡す) 双方の関数の closure 引数を通じて受け渡しを行う。この closure
     用の構造体を定義する。

     共有するデータの代表例が、リクエストに含まれる可変長引数の内容で
     ある。たとえばコマンドの引数が、

          i: n_users, s[n_users]: users

     でこれらを受け渡す場合、構造体はたとえば次のように定義する。

          struct xxx_closure {
              gfarm_int32_t nusers;
              char **users;
          };

  2. コマンド処理関数のうち、gfm_server_get_request() の呼び出し部分
     までをリクエスト処理部として別の関数にする。関数名は、元の関数名
     に _request() を足したものとする。

     この関数は static 関数にし、引数列は以下の実装例の通りにする。

     [実装例]
       変更前:
          gfarm_error_t
          gfm_xxx(struct peer *peer, int skip, void *closure, const char *diag)
       変更後:
          static gfarm_error_t
          gfm_xxx_request(enum request_reply_mode mode, struct peer *peer,
              size_t *sizep, int skip, struct relayed_request *r,
              void *closure, const char *diag)

  3. 2. で分割したリクエスト関数を改造し、リクエストの受信 API を
     gfm_server_get_request() から gfm_server_get_request_with_relay() 
     に変える。

     [実装例]
       変更前:
          gfm_server_get_request(peer, diag, "i", &n_users)
       変更後:
          struct relayed_request *relay;
          gfm_server_get_request_with_relay(peer, sizep, skip, &relay,
              diag, GFM_PROTO_XXX, "s", &hostname)

  4. 2. で分割したリクエスト関数を改造し、レスポンス関数に渡したいデータ
     を closure に格納するように変更する。

     ただし、リクエスト関数は 2 回呼ばれるので、closure への格納処理は、
     サイズ計算時 (= リクエスト関数の mode 引数の値が MODE_TRANSFER 以外
     の時) に行うこと。

     [実装例]
          if ((e = gfm_server_get_request_with_vrelay(peer, sizep, skip, r,
               diag, "i", &nusers)) != GFARM_ERR_NO_ERROR)
                return (e);
          if (mode != MODE_TRANSFER)
               closure->nusers = nusers;

  5. 従来のコマンド処理関数のうち、gfm_server_get_request() の呼び出し
     部分よりも後ろをレスポンス処理部として別の関数にする。関数名は、元の
     関数名に _reply() を足したものとする。

     この関数は static 関数にし、引数列は以下の実装例の通りにする。

     [実装例]
       変更前:
          gfarm_error_t
          gfm_xxx(struct peer *peer, int skip, void *closure, const char *diag)
       変更後:
          static gfarm_error_t
          gfm_xxx_reply(enum request_reply_mode mode, struct peer *peer,
              size_t *sizep, int skip, void *closure, const char *diag)

  6. 5. で分割したレスポンス関数を改造し、レスポンスの送信 API を
     gfm_server_put_reply() から gfm_server_put_reply_with_relay() に
     変える。

     [実装例]
       変更前:
          gfm_server_put_reply(peer, diag, e, "i", n_users)
       変更後:
          gfm_server_put_reply_with_relay(peer, xid, sizep, relay, diag,
              &e, "i", n_users)

  7. 5. で分割したレスポンス関数を改造し、closure に格納されたコマンド
     引数列に応じたレスポンスを返すように改める。

     [実装例]
          if ((e = gfm_server_put_reply_with_relay(peer, xid, sizep, relay,
               diag, &e, "i", closure->nusers)) != GFARM_ERR_NO_ERROR)
                return (e);

  8. コマンド処理関数を、書き直す。
     引数列および処理内容は、以下の実装例を参考のこと。
 
　　 [実装例]     
          gfarm_error_t
          gfm_xxx(struct peer *peer, gfp_xdr_xid_t xid, size_t *sizep,
              int from_client, int skip)
          {
              struct xxx_closure c;

              /* 引数格納用の変数を初期化する。*/
              xxx_closure_init(&c);

              /* gfm_server_request_reply_with_vrelaywait() を呼び出す。
               * GFM_PROTO_XXX は GFM コマンド ID、mode は 
	       * wait_db_update_info() の引数 mode と同じ意味。*/
              if ((e = gfm_server_request_reply_with_vrelaywait(peer, xid,
                  skip, gfm_xxx_request, gfm_xxx_reply, GFM_PROTO_XXX,
                  mode, &c, diag)) != GFARM_ERR_NO_ERROR) {
                      gflog_debug(GFARM_MSG_UNFIXED, "%s: %s", diag,
                          gfarm_error_string(e));
              }
              return (e);
          }
