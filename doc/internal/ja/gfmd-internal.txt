■ 設計指針

○ giant_lock 保持中は休眠してはいけない。XXX 要解説
当然、I/O も行なってはいけない。
唯一の例外は、dbq 待ちの休眠。これは仕方ない。

手抜きで、ネットワーク送信を、giant_lock を保持したままやっている
ところがある。出力は nonblocking モードで行なっている(筈?)なので、
出力内容がバッファよりも小さければ、休眠しない筈。
一応、/* XXX FIXME too long giant lock */ というコメントで、
全ての箇所をマークしてある筈だが…

○ 全メタデータを、メモリにキャッシュする。
性能優先＋コーディングを簡単にするのが目的。
データは gfmd起動時に全てメモリに読み込み、更新のたびに dbq 経由で DB に
書き出す。初期化を除くと、起動中に DB から読み込みを行なうことはない。
XXX dead_file_copy は例外で、起動時にメモリに読み込むと同時に DB から消去し、
    更新されても DB には書かず、gfmd 終了時にはじめて書き戻している。
    これについては、修正を予定。
    → DBRD などを利用した非同期メタデータレプリケーションなどで問題となる。

ただし、xattr だけは例外。
理由は、
・xattr としてかなり大きなデータを想定していた
・設計者が他の部分とは別
であるため。
逆に、データとして小さな xattr へのアクセスが、全くキャッシュされておらず、
非常に遅いという制限事項がある。

■ mutex 一覧

mutex 間の依存関係にループがあってはいけない。デッドロックする。★重要★

同時に複数の mutex の獲得を行なう場合の獲得順序は、すべて文書化が必要。

mutex 獲得順序は、server/gfmd/README 参照
XXX 保守されてない。要更新

・giant_lock -> struct host::remover_mutex -> struct host::replication_mutex
	cf. host_peer_set()

○ leaf routine のみで獲得している mutex

これらの mutex を保持したまま、他の mutex を獲得することはない/してはいけない。

・callout_module.mutex

■ スレッド一覧

スレッド間の依存関係にループがあってはいけない。デッドロックする。★重要★

thrpool_add_job() する場合、
thrpool_add_job() するスレッドは、
thrpool_add_job() されるスレッドプールに、
依存してしまう。
すなわち、thrpool_add_job() されるスレッドプールが満杯の場合、
thrpool_add_job() するスレッドは休眠する。

スレッドプールに属するスレッドが、
自身のスレッドプールに対して thrpool_add_job() するのも駄目。★重要★
そのスレッドプールの全スレッドが、
たまたま全て同時に自スレッドプールに対して thrpool_add_job() すると、
プールに空きがないので、全て休眠し、そのまま寝たきりになる。

スレッドプール間の依存関係にループがあるのも駄目。★重要★
back_channel_send_thread_pool は、通信を解して暗に, 
back_channel_recv_thread_pool に依存しているので要注意。★重要★

依存関係の図は
doc/internal/png/gfmd-thread-dependency.png
にあるが、この図で、
・矢印を丸(スレッド)を辿った時、スレッド間がループになっていてはいけない。
・矢印で箱(スレッドプール)を辿った時、プール間がループになっていてはいけない。
・同一の箱(同一のスレッドプール)の中にあるスレッド間に、
  thrpool_add_job()の矢印関係があってはいけない。

○ main スレッド: accepting_loop() 

   TCP 接続待ちを行なうのが役割。

○ create_detached_thread() で作成される、独立したスレッド。

　・シグナル監視用 sigs_handler()

　・callout 時刻監視用 callout_main() × CALLOUT_NTHREADS

    callout_main() が thrpool_add_job() するスレッドプールの数だけ
    callout_main() スレッドを用意した方が良い。さもないと、あるスレッド
    プールが満杯となったとき、関係ないスレッドの処理まで遅延してしまう。
    現在は、back_channel_send_thread_pool のみであるため、CALLOUT_NTHREADS == 1

    callout_reset() しているのは、back_channel_recv_thread_pool に属する
    gfs_async_client_status_result() だが、callout_reset() は
    cond_signal() しているだけなので、callout_reset() では依存は起きない。

  ・db_thread()

　・ネットワーク受信監視用 peer_watcher() × 1

    peer_watcher() が thrpool_add_job() するスレッドプールの数だけ、
    peer_watcher() スレッドを用意した方が良い。さもないと、あるスレッド
    プールが満杯となったとき、関係ないスレッドの処理まで遅延してしまう。
    現在、sync_protocol_thread_pool と back_channel_recv_thread_pool の 2つ
    あるため peer_watcher() スレッドも 2つにしたいが、現行の peer_watcher() の
    実装がそれを許してなさそうなため、1つのまま。
	→ peer_watcher() を 2スレッドで動かせるように変更する予定。XXX

    XXX DEADLOCK
    現状、以下の理由で、deadlock の危険がある。

    peer_watcher() が呼び出す 2つのスレッドプール、sync_protocol_thread_pool
    および back_channel_recv_thread_pool は、back_channel_send_thread_pool の
    ように、非同期に大量の送信を一度に行なって詰まる心配はない。しかし、
    sync_protocol_thread_pool は back_channel_send_thread_pool に依存し
    ているため、back_channel_send_thread_pool の側の問題で、peer_watcher() に
    よる sync_protocol_thread_pool に対する thrpool_add_job() が詰まる
    可能性は残る。
    peer_watcher() が 1スレッドのみだと、peer_watcher() 自体が止まって
    しまうため、back_channel_recv_thread_pool も巻き添えをくって、止まる。
    その結果、back_channel_recv_thread_pool に依存している
    back_channel_send_thread_pool も動かなくなり、依存関係のループとなって、
    deadlock する。

  ・closer()

  ・旧backend_protocolの場合、各filesystem nodeに対し remover() × 大量

    廃止して、back_channel_recv_thread_pool を使うようにする予定。

○ スレッドプール

プール中の各スレッドの実体は、thrpool_worker()。

　− authentication_thread_pool

    このプールを用いて起動されるのは、以下のスレッド。

    ・try_auth()
      accepting_loop() が thrpool_add_job() する。

　− sync_protocol_thread_pool

    このプールを用いて起動されるのは、以下のスレッド。

    ・protocol_main()
      - try_auth() が、peer_authorized() 経由で、thrpool_add_job() する。
      - peer_watcher() が、thrpool_add_job() する。

　− back_channel_send_thread_pool
  
    このプールを用いて起動されるのは、以下のスレッド。

    ・gfs_async_client_status_request()
      - protocol_main() が、gfm_server_switch_async_back_channel() 経由で、
        thrpool_add_job() する。
      - callout_main() が、thrpool_add_job() する。
	callout に起床を依頼しているのは、back_channel_recv_thread_pool に属する
	gfs_async_client_status_result() だが、callout_reset() を使っているので
	依存は起きない。

    ・gfs_async_client_replication_request_request()
      - protocol_main() が、async_back_channel_replication_request() 経由で、
        thrpool_add_job() する。

　− back_channel_recv_thread_pool

    このプールを用いて起動されるのは、以下のスレッド。

    ・async_back_channel_main()
      - protocol_main() が、gfm_server_switch_async_back_channel() 経由で、
        thrpool_add_job() する。
      - peer_watcher() が、thrpool_add_job() する。
	これが発生するのは、gfsd からの async RPC request か、あるいは、
	gfmd からの async RPC request に対して gfsd が reply した場合。
	後者の gfmd→gfsd の async RPC request は、back_channel_send_thread_pool
	を用いて行なわれる。このため、async_back_channel_main() の処理が
	詰まると、結果として、back_channel_send_thread_pool までも詰まる
	可能性がある。
	このため、back_channel_recv_thread_pool に属するスレッドは、
	以下のプールに属する資源を待ってはいけない。★重要★
	 * authentication_thread_pool
	 * sync_protocol_thread_pool
	 * back_channel_send_thread_pool
	もし行なうと、依存関係がループを構成し、deadlock の危険が生じる。
	当然、上記のプールに thrpool_add_job() してもいけない。
	また、上記のプールに属する資源待ちの mutex を待ってもいけない。
	したがって、giant_lock() を行なっても駄目。
	ただし、上記のプールと競合するが、それ自身では cond_wait() 等を
	行なわない、リーフの mutex を待つだけなら問題ない。
	また、gfm_async_server_replication_result() は、直接、以下を
	行なってはいけない。
		・結果の処理のための host_replicated()
		・結果の送信 peer_sender_lock() を待つことがある。
				→ 送信側を待つことがある。XXX DEADLOCK
