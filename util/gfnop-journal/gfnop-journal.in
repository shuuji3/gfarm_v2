#! @RUBY@
#
# gfnop-journal - Rewrite a particular record in a journal file to
#                 NOP (no-operation).
#

require 'getoptlong.rb'

def print_usage()
  warn("Usage: gfnop-journal [-h?nv] <journal file path> <seqnum>")
  warn("    -h,-? : show this message")
  warn("       -n : read a journal file, but not write actually")
  warn("       -v : verbose mode")
end

#
# Main operation handler.
#
class GFNopJournal
  #
  # Constant values related to journal header and record structures.
  #
  HEADER_MAGIC            = "GfMj"
  HEADER_LENGTH           = 4096
  HEADER_MAGIC_LENGTH     = 4
  HEADER_VERSION_LENGTH   = 4
  HEADER_RESERVED_LENGTH  = 4088

  HEADER_MAGIC_OFFSET     = 0
  HEADER_VERSION_OFFSET   = HEADER_MAGIC_OFFSET   + HEADER_MAGIC_LENGTH
  HEADER_RESERVED_OFFSET  = HEADER_VERSION_LENGTH + HEADER_VERSION_OFFSET

  RECORD_MAGIC            = "GfMr"
  RECORD_MAGIC_LENGTH     = 4
  RECORD_SEQNUM_LENGTH    = 8
  RECORD_OPEID_LENGTH     = 4
  RECORD_DATALEN_LENGTH   = 4
  RECORD_CRC32_LENGTH     = 4

  RECORD_MAGIC_OFFSET     = 0
  RECORD_SEQNUM_OFFSET    = RECORD_MAGIC_OFFSET   + RECORD_MAGIC_LENGTH
  RECORD_OPEID_OFFSET     = RECORD_SEQNUM_OFFSET  + RECORD_SEQNUM_LENGTH
  RECORD_DATALEN_OFFSET   = RECORD_OPEID_OFFSET   + RECORD_OPEID_LENGTH
  RECORD_DATA_OFFSET      = RECORD_DATALEN_OFFSET + RECORD_DATALEN_LENGTH

  #
  # File format versions this program supports.
  #
  SUPPORTED_VERSIONS      = [1]

  #
  # Journal operation ID of NOP.
  #
  OPEID_NOP = 45

  #
  # CRC32 table.
  #
  CRCTABLE = [
    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F,
    0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2,
    0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,
    0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C,
    0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423,
    0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106,
    0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D,
    0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,
    0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7,
    0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA,
    0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81,
    0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84,
    0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,
    0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E,
    0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55,
    0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28,
    0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F,
    0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,
    0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69,
    0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC,
    0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693,
    0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D]

  attr_reader :file
  attr_reader :filename
  attr_accessor :debug_mode

  #
  # Calculate CRC32.
  #
  public
  def GFNopJournal.crc32(data, in_crc32 = 0)
    crc32 = in_crc32 ^ 0xFFFFFFFF
    data.unpack("C*").each do |i|
      crc32 = (crc32 >> 8) ^ CRCTABLE[(crc32 ^ i) & 0xFF]
    end
    return crc32 ^ 0xFFFFFFFF
  end

  #
  # Initializer.
  #
  public
  def initialize(filename)
    @debug_mode = false
    @filename = filename
    begin
      @file = open(filename, "r+")
    rescue => e
      raise "failed to open the journal file, #{e}: #{@filename}"
    end

    #
    # Read a header and check magic ID and version.
    #
    begin
      data = @file.read(HEADER_LENGTH)
    rescue => e
      raise "failed to read a journal header, #{e}: #{@filename}"
    end
    if data.length != HEADER_LENGTH
      raise "malformed journal header"  
    end

    magic = data.slice(HEADER_MAGIC_OFFSET, HEADER_MAGIC_LENGTH)
    if magic != HEADER_MAGIC
      raise "invalid journal file magic code: #{@filename}"
    end

    version = data.slice(HEADER_VERSION_OFFSET, 
			 HEADER_VERSION_LENGTH).unpack("N")[0]
    if !SUPPORTED_VERSIONS.include?(version)
      raise "journal file version '#{version}' not supported: #{@filename}"
    end
  end

  #
  # Close the journal file.
  #
  public
  def close()
    @file.close
  end

  #
  # Read a record at the current position and return its seqnum, opeid
  # and length of the record.
  #
  private
  def inspect_current_record()
    while true
      saved_pos = @file.pos
      begin
	data = @file.read(RECORD_DATA_OFFSET)
	return -1, 0 if data == nil || data.length != RECORD_DATA_OFFSET
	magic = data.slice(RECORD_MAGIC_OFFSET, RECORD_MAGIC_LENGTH)
	break if magic == RECORD_MAGIC
	@file.pos = saved_pos += 1
      rescue => e
	return -1, 0
      end
    end

    seqnum = 0
    data.slice(RECORD_SEQNUM_OFFSET,
	       RECORD_SEQNUM_LENGTH).unpack("C*").each do |i|
      seqnum = (seqnum << 8) + i
    end

    opeid   = data.slice(RECORD_OPEID_OFFSET,
			 RECORD_OPEID_LENGTH).unpack("N")[0]
    data_length = data.slice(RECORD_DATALEN_OFFSET,
			     RECORD_DATALEN_LENGTH).unpack("N")[0]
    record_length = RECORD_DATA_OFFSET + data_length + RECORD_CRC32_LENGTH

    if @debug_mode
      warn("debug: read a record (offset=#{saved_pos}, " +
	   "seqnum=#{seqnum}, opeid=#{opeid}, length=#{record_length})")
    end

    begin
      data = @file.read(data_length)
    rescue => e
      raise "failed to read a journal record body, #{e}: #{@filename}"
    end
    if data.length != data_length
      raise "malformed journal record body: #{@filename}"
    end

    begin
      data = @file.read(RECORD_CRC32_LENGTH)
    rescue => e
      raise "failed to read a journal record checksum, #{e}: #{@filename}"
    end
    if data.length != RECORD_CRC32_LENGTH
      raise "malformed journal record checksum: #{@filename}"
    end

    return seqnum, opeid, record_length
  end

  #
  # Create a NOP record of the specified length.
  #
  private
  def create_nop_record_data(seqnum, record_length)
    data_length = record_length - RECORD_DATA_OFFSET - RECORD_CRC32_LENGTH
    raise "Target record is too small (corrupted?)\n" if data_length < 4

    nop_record  = RECORD_MAGIC
    nop_record += [(seqnum >> 32) & 0xFFFFFFFF, seqnum & 0xFFFFFFFF].pack("NN")
    nop_record += [OPEID_NOP].pack("N")
    nop_record += [data_length].pack("N")
    nop_record += [data_length - 4].pack("N")
    nop_record += "\0" * (data_length - 4)
    nop_record += [GFNopJournal.crc32(nop_record)].pack("N")
    return nop_record
  end

  #
  # Internal method for 'rewrite_record()' and 'test_rewrite_record()'.
  #
  private
  def rewrite_record_internal(target_seqnum, test_mode)
    raise "File has already been closed: #{@filename}" if @file.closed?

    #
    # Rewind.
    #
    begin
      @file.pos = HEADER_LENGTH
    rescue => e
      raise "Failed to seek the journal file, #{e}: #{@filename}"
    end

    while true
      #
      # Read a record.
      #
      seqnum, opeid, record_length = inspect_current_record()
      if seqnum < 0
	raise "a record with seqnum=#{target_seqnum} not found"
      end
      next if seqnum != target_seqnum

      #
      # Create a NOP record.
      #
      nop_record_data = create_nop_record_data(seqnum, record_length)

      #
      # Write the NOP record.
      #
      target_pos = @file.pos - record_length
      if test_mode
	warn("#{$0}: a record with seqnum=#{seqnum} found at")
	warn("#{$0}:   offset=#{target_pos}, opeid=#{opeid}, " +
	     "length=#{record_length}")
      else
	begin
	  rest_length = nop_record_data.length
	  @file.pos -= record_length
	  while rest_length > 0
	    written_length = @file.write(nop_record_data)
	    rest_length -= written_length
	    nop_record_data.slice!(0, written_length)
	  end
	rescue => e
	  raise "Failed to write a NOP record, #{e}: #{@filename}"
	end
	if @debug_mode
	  warn("debug: write a NOP record (offset=#{target_pos}, " + 
	       "seqnum=#{seqnum}, length=#{record_length})")
	end
      end
      break
    end

    return self
  end

  #
  # Search a journal file for a record with the specified seqnum
  # and rewrite the record with NOP.
  #
  public
  def rewrite_record(target_seqnum)
    return rewrite_record_internal(target_seqnum, false)
  end

  #
  # Similar to rewrite_record() but it doesn't rewrite actually.
  #
  public
  def test_rewrite_record(target_seqnum)
    return rewrite_record_internal(target_seqnum, true)
  end
end

#
# Parse command line arguments.
#
$debug_mode = false
$test_mode = false

$opts = GetoptLong.new
$opts.set_options(['-h', '-?', GetoptLong::NO_ARGUMENT],
		  ['-n',       GetoptLong::NO_ARGUMENT],
		  ['-v',       GetoptLong::NO_ARGUMENT])
begin
  $opts.each_option do |name, arg|
    case name
    when '-d'
      $debug_mode = true
    when '-n'
      $test_mode = true
    when '-h'
      print_usage()
      exit(0)
    end
  end
rescue
  print_usage()
  exit(1)
end

if ARGV.length != 2 || ARGV[1] !~ /^(0|[1-9][0-9]*)$/
  print_usage()
  exit(1)
end

$journal_filename = ARGV[0]
$target_seqnum = ARGV[1].to_i

#
# Rewrite a journal file.
#
begin
  $gfnop = GFNopJournal.new($journal_filename)
  $gfnop.debug_mode = $debug_mode
  if $test_mode
    $gfnop.test_rewrite_record($target_seqnum)
  else
    $gfnop.rewrite_record($target_seqnum)
  end
  $gfnop.close
rescue => e
  warn("#{$0}: #{e}")
  exit(1)
end

exit(0)
